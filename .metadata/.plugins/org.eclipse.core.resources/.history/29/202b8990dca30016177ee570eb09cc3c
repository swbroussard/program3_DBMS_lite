import java.sql.*;
//import java.io.*;

/*=========================================================================
 |   Assignment:  Program #3: JDBC  
 |       Author: Steven Broussard (stevenwbroussard@email.arizona.edu)
 |       Grader: Zhenge Zhoa 
 |
 |       Course: CSC 460
 |   Instructor: L. McCann
 |     Due Date: November 3, 2016 12:29PM (late: 1 day)
 |
 |  Description: connects to the oracle database and 
 |               have a user interface or view with a few query questions 
 |               parents might be interested to know about the schools.
 |
 |     Language: Java JE 1.8
 | Ex. Packages: 
 |                
 | Deficiencies: none as of right now
 *=======================================================================*/
public class Prog3 {
	
	//global instance variable for SQL queries
	private static SQLCommandLibrary comd = new SQLCommandLibrary();
	
	/*---------------------------------------------------------------------
    |  Method: topFivePercentage
    |
    |  Purpose: user selects the percentage and output the top five schools
    |           per school year. Other words there will be four lists of the
    |           top five schools in that year.
    |
    |  Pre-condition: none
    |
    |  Post-condition: none
    |
    |  Parameters: String percentage - the user choice of percents
    |              Statement stat - Statement object to execute SQL queries
    |
    |  Returns: none
    *-------------------------------------------------------------------*/
	private static void topFivePercentage(String percent, Statement stat) {
		ResultSet ans = null;
		String[] tables = new String[4];
		ResultSetMetaData ansMetaData = null;
		
		tables[0] = "stevenwbroussard.WRCT_98_99";
		tables[1] = "stevenwbroussard.WRCT_00_01";
		tables[2] = "stevenwbroussard.WRCT_02_03";
		tables[3] = "stevenwbroussard.WRCT_04_05";
		
		for (int j = 0; j < tables.length; j++) {
			try {
				System.out.println(tables[j]);
				ans = stat.executeQuery(comd.whichPercent(percent, tables[j]));
			}
			catch(SQLException s) {
				System.out.println("SQL percent statement failed.");
				s.printStackTrace();
				System.exit(-1);
			}
		
			try {
				ansMetaData = ans.getMetaData();
			}
			catch(SQLException s) {
				System.out.println("grabing meta data failed.");
				s.printStackTrace();
				System.exit(-1);
			}
		
			try {
				for (int i = 1; i <= ansMetaData.getColumnCount(); i++) {
					System.out.print(ansMetaData.getColumnName(i) + "\t");
				}
			}
			catch(SQLException s) {
				System.out.println("Grabbing column name fail from SQL.");
				s.printStackTrace();
				System.exit(-1);
			}
		
			//new line after printing columns
			System.out.println("");
		
			try {
				for (int i = 0; ans.next() && i < 4; i++) {
					if (!(ans.getString("schName").equals("NULL"))) {
						System.out.println(ans.getString("schName") + "\t"
								+ ans.getDouble(percent));
					}
					else {
						System.out.println("Unknown School" + "\t"
								+ ans.getDouble(percent));
					}
				}
			}
			catch(SQLException s) {
				System.out.println("Grabbing tuple by column name failed.");
				s.printStackTrace();
				System.exit(-1);
			}
		
			//after printing the results
			System.out.println("");
		}   //end of for (int j = 0; j < tables.length; j++)
		
		//release information of ResultSet object
		try {
			ans.close();
		}
		catch (SQLException s) {
			System.out.println("Can not close ResultSet object.");
			s.printStackTrace();
			System.exit(-1);
		}
	}
	
	/*---------------------------------------------------------------------
    |  Method: noTestTrend
    |
    |  Purpose: user selects school name and outputs if the no test percent
    |           is increasing, decreasing, or neither.
    |  Pre-condition: none
    |
    |  Post-condition: none
    |
    |  Parameters: String schlName - the user choice of school name
    |              Statement stat - Statement object to execute SQL queries
    |
    |  Returns: none
    *-------------------------------------------------------------------*/
	private static void noTestTrend (String schlName, Statement stat) {
		ResultSet ans = null;
		//ResultSetMetaData ansMeta = null;
		double[] percentNotTested = new double[4];
		String[] tables = new String[4];
		
		tables[0] = "stevenwbroussard.WRCT_98_99";
		tables[1] = "stevenwbroussard.WRCT_00_01";
		tables[2] = "stevenwbroussard.WRCT_02_03";
		tables[3] = "stevenwbroussard.WRCT_04_05";
		
		percentNotTested[0] = 0.0;
		percentNotTested[1] = 0.0;
		percentNotTested[2] = 0.0;
		percentNotTested[3] = 0.0;
		
		for (int m = 0; m < tables.length; m++) {
			try {
				ans = stat.executeQuery(comd.noTestPercent(schlName,tables[m]));
			}
			catch (SQLException s) {
				System.out.println("SQL Query Failed.");
				s.printStackTrace();
				System.exit(-1);
			}
		
			try {
				ans.next();
				percentNotTested[m] = ans.getDouble("perNoTest");
			}
			catch(SQLException s) {
				System.out.println("Grabbing tuple by column name failed.");
				s.printStackTrace();
				System.exit(-1);
			}
		}
		
		if (percentNotTested[0] < percentNotTested[1] &&
			percentNotTested[1] < percentNotTested[2] &&
			percentNotTested[2] < percentNotTested[3]) {
			System.out.println("The noTest percent for " + schlName + " is increasing.");
		}
		else if (percentNotTested[0] > percentNotTested[1] &&
				 percentNotTested[1] > percentNotTested[2] &&
				 percentNotTested[2] > percentNotTested[3]) {
			System.out.println("The noTest percent for " + schlName + " is decreasing.");
		}
		else {
			System.out.println("can not determined increasing or decreasing.");
		}
		
		//release ResultSet object information
		try {
			ans.close();
		}
		catch (SQLException s) {
			System.out.println("Can not close ResultSet object.");
			s.printStackTrace();
			System.exit(-1);
		}		
		
	}
	/*---------------------------------------------------------------------
    |  Method: noTestTrend
    |
    |  Purpose: user selects school name and outputs if the no test percent
    |           is increasing, decreasing, or neither.
    |  Pre-condition: none
    |
    |  Post-condition: none
    |
    |  Parameters: String schlName - the user choice of school name
    |              Statement stat - Statement object to execute SQL queries
    |
    |  Returns: none
    *-------------------------------------------------------------------*/
	private static void averagePercent(String percent,String schoolName, Statement stat) {
		ResultSet ans = null;
		String[] tables = new String[4];
		double sum = 0.0;
		double occurence = 0.0;
		double temp = 0.0;
		double ave = 0.0;
		
		tables[0] = "stevenwbroussard.WRCT_98_99";
		tables[1] = "stevenwbroussard.WRCT_00_01";
		tables[2] = "stevenwbroussard.WRCT_02_03";
		tables[3] = "stevenwbroussard.WRCT_04_05";
		
		for (int m = 0; m < tables.length; m++) {
			try {
				ans = stat.executeQuery(comd.grabPercent(schoolName, tables[m], percent));
			}
			catch (SQLException s) {
				System.out.println("SQL Query Failed.");
				s.printStackTrace();
				System.exit(-1);
			}
		
			try {
				ans.next();
				temp = ans.getDouble("perNoTest");
				if (temp != -1.0) {
					sum += temp;
					occurence += 1;
				}
			}
			catch(SQLException s) {
				System.out.println("Grabbing tuple by column name failed.");
				s.printStackTrace();
				System.exit(-1);
			}
		}
		
		ave = sum / occurence; 
		
		System.out.println("The average of " + percent + " for the " + schoolName + " is "  + (ave));
		
		//release ResultSet object information
		try {
			ans.close();
		}
		catch (SQLException s) {
			System.out.println("Can not close ResultSet object.");
			s.printStackTrace();
			System.exit(-1);
		}
		
	}
	
	//executing main program
	public static void main(String[] vars) {
		Connection dbConnection = null;
		Statement stat = null;
		
		//calling the driver
		try {
			Class.forName("oracle.jdbc.OracleDriver");
		}
		catch(ClassNotFoundException c) {
			System.out.println("Can not find Class Driver.");
			c.printStackTrace();
			System.exit(-1);
		}
		
		//connect to the Oracle server
		try {
			dbConnection = DriverManager.getConnection(
				           "jdbc:oracle:thin:@aloe.cs.arizona.edu:1521:oracle"
				           ,vars[0], vars[1]);
		}
		catch(SQLException s) {
			System.out.println("Connection Failed.");
			s.printStackTrace();
			System.exit(-1);
		}
		
		//creates SQL statement query object
		try {
			stat = dbConnection.createStatement();
		}
		catch(SQLException s) {
			System.out.println("Making SQL Statement Object Failed.");
			s.printStackTrace();
			System.exit(-1);
		}
		
		//TODO: make user input scanner
		//TODO: choice one: for each of the school years and the different percentages,
		//      list the top 5 highest percentage school in descending order.
		//topFivePercentage("perBasic", stat);
		
		//TODO: choice two: Given each school during the four years; list if the
		//      not tested percentage trend is strictly increasing, decreasing, or neither.
		//noTestTrend("Adams-Friendship El", stat);
		
		//TODO: choice three: Average of percents for that school
		averagePercent("perBasic","Adams-Friendship El",stat);
		
		//close all threads before exiting the program
		try {
			stat.close();
			dbConnection.close();
		}
		catch (SQLException i) {
			System.out.println("Attempted to Close Threads and failed.");
			i.printStackTrace();
			System.exit(-1);
		}
	}
	
}
